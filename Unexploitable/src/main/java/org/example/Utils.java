package org.example;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class Utils {
    private static final Logger LOG = LoggerFactory.getLogger(Utils.class);


    private static String[] deck = {
            "As", "Ah", "Ad", "Ac",
            "2s", "2h", "2d", "2c",
            "3s", "3h", "3d", "3c",
            "4s", "4h", "4d", "4c",
            "5s", "5h", "5d", "5c",
            "6s", "6h", "6d", "6c",
            "7s", "7h", "7d", "7c",
            "8s", "8h", "8d", "8c",
            "9s", "9h", "9d", "9c",
            "Ts", "Th", "Td", "Tc",
            "Js", "Jh", "Jd", "Jc",
            "Qs", "Qh", "Qd", "Qc",
            "Ks", "Kh", "Kd", "Kc"
    };




    public static void generateFlop(String hand){
        Random r = new Random();
        String[] flop = new String[3];
        flop[0]=deck[r.nextInt(deck.length)];
        boolean doLoop = true;

        while( Objects.equals(flop[0], flop[1]) || checkCardInHand(hand,flop[1]) || doLoop){
            flop[1]=deck[r.nextInt(deck.length)];
            doLoop=false;
        }

        doLoop=true;
        while(Objects.equals(flop[0], flop[2]) || Objects.equals(flop[1], flop[2]) || checkCardInHand(hand,flop[2]) || doLoop){
            flop[2]=deck[r.nextInt(deck.length)];
            doLoop=false;
        }

        LOG.info("Hero hand : {} {} ", hand.substring(0,2),hand.substring(2,4));
        LOG.info("generato flop : {} {} {}",flop[0],flop[1],flop[2]);
    }



    public static boolean checkCardInHand(String hand , String card){
        String firsthandCard = hand.substring(0,2);
        String secondHandCard = hand.substring(2,4);
        return (Objects.equals(firsthandCard, card) || Objects.equals(secondHandCard, card));
    }


    public static String[] sortBoard (String[] board){
        String[] sortedBoard  = new String[5];
        Integer[] arrayofInt = new Integer[board.length];
        for(int i=0 ; i<4 ; i++){
            arrayofInt[i]=returnNumber(board[i].substring(0,2));
        }
        Arrays.sort(arrayofInt, Collections.reverseOrder());
        //TODO : implementare logica
        return sortedBoard;
    }


    public static String calculateOnFlop(String[] flop , String hand){
        if(flop.length==3){
            return ";";
        }else{
            return null;
        }
    }


    public static String pairnessOfFlop (String[] flop){
        if(returnNumber(flop[0])==returnNumber(flop[1]) && returnNumber(flop[1])==returnNumber(flop[2])) return "Tripsed";
        if(returnNumber(flop[0])==returnNumber(flop[1]) || returnNumber(flop[1])==returnNumber(flop[2]) || returnNumber(flop[0])==returnNumber(flop[2]) ) return "Paired";
        return "Unpaired";
    }

    public static boolean handIsAPair (String[] hand){
        return (returnNumber(hand[0])==returnNumber(hand[1])) ;
    }

    public static boolean isFullHouse(String[] board, String[] hand){
        boolean trips = false;
        boolean pair = false;
        int coutForTrips=0;

        if(isFullHouseBoard(board)) {
            LOG.info("fullHouse | perche il board è un fullHouseBoard");
            return true;
        }
       if(handIsAPair(hand)){
           if(boardContainThatCard(board,hand) && boardIsPaired(board)) {
               LOG.info("fullHouse | perche la mano è una pair che fa un set col board e il board è pairato");
               return true;
           }
       }



        return trips && pair;
    }


    public static boolean boardContainThatCard(String[] board, String[] hand){
        for(String s : board){
            if( (returnNumber(s)==returnNumber(hand[0])) || (returnNumber(s)==returnNumber(hand[1])) ) return true;
        }
        return false;
    }

    public static boolean boardIsPaired(String[] board){
        int count=0;
        for(int i=0 ; i<board.length-1 ; i++){
            for(int j=i+1 ; j<board.length ; j++){
                if(returnNumber(board[i])==returnNumber(board[j])) {
                    count++;
                }
            }
        }
        LOG.info("Board is not paired!");
        return false;
    }

    public static boolean isFullHouseBoard(String[] board){
        if(board.length==5){
            HashMap<String,Integer> map = new HashMap<>();
            for(String s : board){
                if(!map.containsKey(s.substring(0,1))){
                    map.put(s.substring(0,1),1);
                }else{
                    int count=map.get(s.substring(0,1));
                    count++;
                    map.put(s.substring(0,1),count);
                }
            }
            if(map.size()==2){
                for(Map.Entry<String,Integer> entry : map.entrySet()){
                    if(entry.getValue()>1 && entry.getValue()<4 ) {
                        LOG.info("board is a fullHouse board");
                        return true;
                    }
                }
            }
        }
        LOG.info("board is not a fullHouse board");
        return false;
    }




        public static Integer returnNumber(String s) {
            String compare = s.substring(0,1);
            switch (compare) {
                case "A":
                    return 14;
                case "2":
                    return 2;
                case "3":
                    return 3;
                case "4":
                    return 4;
                case "5":
                    return 5;
                case "6":
                    return 6;
                case "7":
                    return 7;
                case "8":
                    return 8;
                case "9":
                    return 9;
                case "T":
                    return 10;
                case "J":
                    return 11;
                case "Q":
                    return 12;
                case "K":
                    return 13;
                default:
                    return null;
            }
        }

    public static String returnCard(int i) {
        switch (i) {
            case 14:
                return "A";
            case 13:
                return "K";
            case 12:
                return "Q";
            case 11:
                return "J";
            case 10:
                return "T";
            default:
                return String.valueOf(i);
        }
    }

    public static String getFirstCard(String hand){
        return hand.substring(0,2);
    }

    public static String getSecondCard(String hand){
        return hand.substring(2,4);
    }

    public static Integer[] getPositionOfCardsPaired(String[] flop){
        if("Paired".equalsIgnoreCase(pairnessOfFlop(flop))){
            if(returnNumber(flop[0])==returnNumber(flop[1])) return new Integer[]{0,1};
            if(returnNumber(flop[0])==returnNumber(flop[2])) return new Integer[]{0,2};
            if(returnNumber(flop[1])==returnNumber(flop[2])) return new Integer[]{1,2};
        }
        return null;
    }

    public static Integer getPositionOfTheCardNotPaired(String[] flop){
        Integer[] positions = getPositionOfCardsPaired(flop);
        for(int i=0 ; i<flop.length ; i++){
            if(i!=positions[0] && i!=positions[1]) return i;
        }
        return null;
    }



}








